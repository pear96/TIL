# 비트마스킹??
X = int(input())
length = 64
count = 0

while X > 0:
    if X >= length:
        X -= length
        count += 1
    length //= 2

print(count)

"""
막대 길이는 항상 2의 거듭제곱(64, 32, 16, 8, 4, 2, 1)만 나오고, 자를 때마다 다음 작은 2의 거듭제곱 두 개로 쪼개지지. 버리는 쪽이 있다는 건, “그 길이의 막대가 X에 더하면 초과되기 때문에 필요 없다”는 의미고, 남기는 쪽이 있다는 건 “그 길이가 X에 필요한 부분임”을 의미해.

결과적으로 남는 막대들은 서로 다른 2의 거듭제곱(예: 32+8+2+1 같은)으로 구성되고, 이건 바로 X를 이진수로 썼을 때 각 자리의 1이 가리키는 값들이야.
•	예: X=23 → 이진수 10111 → 16+4+2+1 → 4개의 1 → 4개의 막대
X = int(input())
print(X.bit_count())
•	내부적으로 이진 표현에서 1인 자리 수를 세어서 반환한다.
bin(X).count('1')로도 동일하게 구할 수 있어요.
"""